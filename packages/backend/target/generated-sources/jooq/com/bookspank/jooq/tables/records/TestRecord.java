/*
 * This file is generated by jOOQ.
 */
package com.bookspank.jooq.tables.records;


import com.bookspank.jooq.tables.Test;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TestRecord extends UpdatableRecordImpl<TestRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.test.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.test.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.test.mock</code>.
     */
    public void setMock(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.test.mock</code>.
     */
    public String getMock() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.test.user_id</code>.
     */
    public void setUserId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.test.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRecord
     */
    public TestRecord() {
        super(Test.TEST);
    }

    /**
     * Create a detached, initialised TestRecord
     */
    public TestRecord(Integer id, String mock, Integer userId) {
        super(Test.TEST);

        setId(id);
        setMock(mock);
        setUserId(userId);
        resetChangedOnNotNull();
    }
}

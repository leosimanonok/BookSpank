/*
 * This file is generated by jOOQ.
 */
package com.bookspank.jooq.tables;


import com.bookspank.jooq.Keys;
import com.bookspank.jooq.Public;
import com.bookspank.jooq.tables.Books.BooksPath;
import com.bookspank.jooq.tables.Users.UsersPath;
import com.bookspank.jooq.tables.records.ReviewsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Reviews extends TableImpl<ReviewsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.reviews</code>
     */
    public static final Reviews REVIEWS = new Reviews();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReviewsRecord> getRecordType() {
        return ReviewsRecord.class;
    }

    /**
     * The column <code>public.reviews.id</code>.
     */
    public final TableField<ReviewsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.reviews.book_id</code>.
     */
    public final TableField<ReviewsRecord, Integer> BOOK_ID = createField(DSL.name("book_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.reviews.user_id</code>.
     */
    public final TableField<ReviewsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.reviews.title</code>.
     */
    public final TableField<ReviewsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.reviews.text</code>.
     */
    public final TableField<ReviewsRecord, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.reviews.written_at</code>.
     */
    public final TableField<ReviewsRecord, LocalDateTime> WRITTEN_AT = createField(DSL.name("written_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.LOCALDATETIME)), this, "");

    private Reviews(Name alias, Table<ReviewsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Reviews(Name alias, Table<ReviewsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.reviews</code> table reference
     */
    public Reviews(String alias) {
        this(DSL.name(alias), REVIEWS);
    }

    /**
     * Create an aliased <code>public.reviews</code> table reference
     */
    public Reviews(Name alias) {
        this(alias, REVIEWS);
    }

    /**
     * Create a <code>public.reviews</code> table reference
     */
    public Reviews() {
        this(DSL.name("reviews"), null);
    }

    public <O extends Record> Reviews(Table<O> path, ForeignKey<O, ReviewsRecord> childPath, InverseForeignKey<O, ReviewsRecord> parentPath) {
        super(path, childPath, parentPath, REVIEWS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ReviewsPath extends Reviews implements Path<ReviewsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ReviewsPath(Table<O> path, ForeignKey<O, ReviewsRecord> childPath, InverseForeignKey<O, ReviewsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ReviewsPath(Name alias, Table<ReviewsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ReviewsPath as(String alias) {
            return new ReviewsPath(DSL.name(alias), this);
        }

        @Override
        public ReviewsPath as(Name alias) {
            return new ReviewsPath(alias, this);
        }

        @Override
        public ReviewsPath as(Table<?> alias) {
            return new ReviewsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ReviewsRecord, Integer> getIdentity() {
        return (Identity<ReviewsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReviewsRecord> getPrimaryKey() {
        return Keys.REVIEWS_PKEY;
    }

    @Override
    public List<UniqueKey<ReviewsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.REVIEWS_BOOK_ID_USER_ID_KEY);
    }

    @Override
    public List<ForeignKey<ReviewsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REVIEWS__REVIEWS_BOOK_ID_FKEY, Keys.REVIEWS__REVIEWS_USER_ID_FKEY);
    }

    private transient BooksPath _books;

    /**
     * Get the implicit join path to the <code>public.books</code> table.
     */
    public BooksPath books() {
        if (_books == null)
            _books = new BooksPath(this, Keys.REVIEWS__REVIEWS_BOOK_ID_FKEY, null);

        return _books;
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.REVIEWS__REVIEWS_USER_ID_FKEY, null);

        return _users;
    }

    @Override
    public Reviews as(String alias) {
        return new Reviews(DSL.name(alias), this);
    }

    @Override
    public Reviews as(Name alias) {
        return new Reviews(alias, this);
    }

    @Override
    public Reviews as(Table<?> alias) {
        return new Reviews(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reviews rename(String name) {
        return new Reviews(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reviews rename(Name name) {
        return new Reviews(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reviews rename(Table<?> name) {
        return new Reviews(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Reviews where(Condition condition) {
        return new Reviews(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Reviews where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Reviews where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Reviews where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Reviews where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Reviews where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Reviews where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Reviews where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Reviews whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Reviews whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.bookspank.jooq;


import com.bookspank.jooq.tables.Books;
import com.bookspank.jooq.tables.FlywaySchemaHistory;
import com.bookspank.jooq.tables.Reviews;
import com.bookspank.jooq.tables.Users;
import com.bookspank.jooq.tables.records.BooksRecord;
import com.bookspank.jooq.tables.records.FlywaySchemaHistoryRecord;
import com.bookspank.jooq.tables.records.ReviewsRecord;
import com.bookspank.jooq.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BooksRecord> BOOKS_PKEY = Internal.createUniqueKey(Books.BOOKS, DSL.name("books_pkey"), new TableField[] { Books.BOOKS.ID }, true);
    public static final UniqueKey<BooksRecord> BOOKS_TITLE_AUTHOR_KEY = Internal.createUniqueKey(Books.BOOKS, DSL.name("books_title_author_key"), new TableField[] { Books.BOOKS.TITLE, Books.BOOKS.AUTHOR }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<ReviewsRecord> REVIEWS_BOOK_ID_USER_ID_KEY = Internal.createUniqueKey(Reviews.REVIEWS, DSL.name("reviews_book_id_user_id_key"), new TableField[] { Reviews.REVIEWS.BOOK_ID, Reviews.REVIEWS.USER_ID }, true);
    public static final UniqueKey<ReviewsRecord> REVIEWS_PKEY = Internal.createUniqueKey(Reviews.REVIEWS, DSL.name("reviews_pkey"), new TableField[] { Reviews.REVIEWS.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_EMAIL_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_email_key"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BooksRecord, UsersRecord> BOOKS__BOOKS_SELECTED_BY_FKEY = Internal.createForeignKey(Books.BOOKS, DSL.name("books_selected_by_fkey"), new TableField[] { Books.BOOKS.SELECTED_BY }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<ReviewsRecord, BooksRecord> REVIEWS__REVIEWS_BOOK_ID_FKEY = Internal.createForeignKey(Reviews.REVIEWS, DSL.name("reviews_book_id_fkey"), new TableField[] { Reviews.REVIEWS.BOOK_ID }, Keys.BOOKS_PKEY, new TableField[] { Books.BOOKS.ID }, true);
    public static final ForeignKey<ReviewsRecord, UsersRecord> REVIEWS__REVIEWS_USER_ID_FKEY = Internal.createForeignKey(Reviews.REVIEWS, DSL.name("reviews_user_id_fkey"), new TableField[] { Reviews.REVIEWS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
}
